package com.example.prikol.ui.katex

import android.annotation.SuppressLint
import android.content.Context
import android.webkit.JavascriptInterface
import android.webkit.WebView
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView

class KatexView(context: Context) : WebView(context) {
    private val displayModePageTemplate = """
        <!DOCTYPE html>
        <html>
            <head>
                <link rel="stylesheet" type="text/css" href="file:///android_asset/katex/katex.min.css">
                <script type="text/javascript" src="file:///android_asset/katex/katex.min.js"></script>
                
                <style type='text/css'>
                    html {
                           <!-- border: 2px solid blue; -->
                    }
                    #katexContent {
                           <!-- border: 2px dashed red; -->
                        font-size: 14px;
                        padding: 2px;   <!--  to display fracs that went off border? -->
                    }
                    #test {
                        border: 2px dashed red;
                    }
                    body {
                        margin: 0;   <!-- behaves like padding? --> 
                    }
                </style>
            </head>
            
            <body>
                <div id="katexContent" class="content"></div>
            </body>
          
            <script>
                const katexContent = document.getElementById("katexContent");
                const html = document.getElementsByTagName("html")[0];

                katex.render(String.raw`{codeToRender}`, katexContent, {
                    displayMode: {isInDisplayMode},
                    macros: {
                        "": ""
                    },
                    throwOnError: false
                });
            </script>
        </html>
    """
    private val pageTemplate: String = """
        <!DOCTYPE html>
        <html>
            <head>
                <link rel="stylesheet" type="text/css" href="file:///android_asset/katex/katex.min.css">
                <script type="text/javascript" src="file:///android_asset/katex/katex.min.js"></script>
                
                <style type='text/css'>
                    html {
                           <!-- border: 2px solid blue; -->
                    }
                    #katexContent {
                        display: inline-block;
                           <!-- border: 2px dashed red; -->
                        font-size: 14px;
                        padding: 2px;   <!--  to display fracs that went off border? -->
                    }
                    #test {
                        border: 2px dashed red;
                    }
                    body {
                        margin: 0;   <!-- behaves like padding? --> 
                    }
                </style>
            </head>
            
            <body>
                <div id="katexContent" class="content"></div>
            </body>
          
            <script>
                const katexContent = document.getElementById("katexContent");
                const html = document.getElementsByTagName("html")[0];
                let k = 0;
                const observer = new ResizeObserver(entries => {
                    entries.forEach(entry => {
                        if (k < 2) {
                            sendKatexSize("observer");
                            html.style.width = katexContent.offsetWidth + "px";   <!-- Why?.. -->
                            html.style.height = katexContent.offsetHeight + "px";
                            k = k + 1;
                        }
                    });
                });

                katex.render(String.raw`{codeToRender}`, katexContent, {
                    displayMode: {isInDisplayMode},
                    macros: {
                        "": ""
                    },
                    throwOnError: false
                });
                observer.observe(katexContent);
            
                function sendKatexSize(message = "") {
                    JSBridge.sendValues(message + " " + katexContent.offsetWidth + " " + katexContent.offsetHeight + " " + k);
                };
            </script>
        </html>
    """

    fun loadText(codeToRender: String, displayMode: Boolean = false, testMode: Boolean = false) {
        val data: String = (if (displayMode) displayModePageTemplate else pageTemplate).replace("{codeToRender}", codeToRender).replace("{isInDisplayMode}", "$displayMode")

        loadDataWithBaseURL("null", data, "text/html", "UTF-8", "null")
    }

    @SuppressLint("SetJavaScriptEnabled")
    fun configureSettings() {
        setLayerType(LAYER_TYPE_HARDWARE, null)   // Who are you, warrior?
        settings.javaScriptEnabled = true
        settings.allowFileAccess = true

        isVerticalScrollBarEnabled = false
        isHorizontalScrollBarEnabled = false
    }

    init {
        configureSettings()
    }
}

class JSBridge(
    private val onValueReceive: (Int, Int, Int) -> Unit = { w, h, k -> }
) {
    @JavascriptInterface
    fun sendValues(s: String) {
//        Log.d("JSBridge", s)

        val sSplit = s.split(" ")
        val last = sSplit.lastIndex
        val vals = listOf(sSplit[last - 2], sSplit[last - 1], sSplit[last]).map { it.toInt() }

        onValueReceive(vals[0], vals[1], vals[2])
    }
}

@Composable
fun Katex(
    codeToRender: String,
    displayMode: Boolean = false,
    testMode: Boolean = false,
//    modifier: Modifier
) {
    val katexView = KatexView(LocalContext.current)
    var myModifier by remember { mutableStateOf(Modifier.border(BorderStroke(-1.dp, Color.Black))) }

//    katexView.addJavascriptInterface(JSBridge(onValueReceive = { w, h, k -> myModifier = Modifier.width(w.dp)
    if (!testMode) katexView.addJavascriptInterface(JSBridge(onValueReceive = { w, h, k -> myModifier = Modifier.size(w.dp, h.dp) }), "JSBridge")

    AndroidView(
        factory = {
            katexView.loadText(codeToRender, displayMode, testMode)
            katexView
        },
        update = {
            it.loadText(codeToRender, displayMode, testMode)
        },
        modifier = myModifier
    )
}